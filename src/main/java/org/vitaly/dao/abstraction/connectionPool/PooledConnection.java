package org.vitaly.dao.abstraction.connectionPool;

import java.sql.PreparedStatement;
import java.sql.SQLException;

/**
 * Connection wrapper
 */
public interface PooledConnection extends AutoCloseable {

    /**
     * Sets auto commit of connection
     *
     * @param autoCommit auto commit
     * @throws SQLException if failed to set auto commit
     */
    void setAutoCommit(boolean autoCommit) throws SQLException;

    /**
     * Returns auto commit of connection
     *
     * @return auto commit of connection
     * @throws SQLException if failed to get auto commit
     */
    boolean getAutoCommit() throws SQLException;

    /**
     * Returns true is connection is part of transaction and false otherwise
     *
     * @return true is connection is part of transaction and false otherwise
     */
    boolean isInTransaction();

    /**
     * Set that connection is in transaction or not
     *
     * @param isInTransaction connection is in transaction or not
     */
    void setInTransaction(boolean isInTransaction);

    /**
     * Sets transaction isolation level for connection
     *
     * @param isolationLevel transaction isolation
     * @throws SQLException if failed to set transaction isolation
     * @see java.sql.Connection
     */
    void setTransactionIsolation(int isolationLevel) throws SQLException;

    /**
     * Prepares sql statement
     *
     * @param sql sql statement
     * @return prepared sql statement
     * @throws SQLException if failed to prepare statement
     */
    PreparedStatement prepareStatement(String sql) throws SQLException;

    /**
     * Prepares sql statement to return auto generated keys
     *
     * @param sql sql statement
     * @return prepared sql statement which returns auto generated keys
     * @throws SQLException if failed to prepare statement
     */
    PreparedStatement prepareStatement(String sql, int autoGeneratedKeys) throws SQLException;

    /**
     * Commit transaction
     *
     * @throws SQLException if failed to commit transaction
     */
    void commit() throws SQLException;

    /**
     * Rollback transaction
     *
     * @throws SQLException if failed to rollback transaction
     */
    void rollback() throws SQLException;

    /**
     * Close connection
     *
     * @throws SQLException if failed to close connection
     */
    @Override
    void close() throws SQLException;
}
